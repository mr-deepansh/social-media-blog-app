# =================================================
# Environment Configuration Template
# =================================================
# Copy this file to .env and fill in your values
# NEVER commit .env file to version control
# =================================================

# =================================================
# ENVIRONMENT
# =================================================
NODE_ENV=development
# Options: development, production, test

# =================================================
# SERVER CONFIGURATION
# =================================================
PORT=5000
HOST=0.0.0.0
API_VERSION=v2
CORS_ORIGIN=http://localhost:8080
# For multiple origins: http://localhost:8080,https://yourdomain.com

# HTTPS Configuration
IS_LOCAL_NETWORK=false
HTTPS_ENABLED=false

# Cookie Settings
COOKIE_MAXAGE_DAY=7
COOKIE_REMEMBERME_DAY=30

# CORS Settings
CORS_CREDENTIALS=true
CORS_METHODS=GET,POST,PUT,PATCH,DELETE,OPTIONS
CORS_OPTIONS_SUCCESS_STATUS=204
CORS_MAX_AGE=86400

# Security Headers
BODY_LIMIT=16kb
SERVER_TIMEOUT=30000
KEEP_ALIVE_TIMEOUT=5000
SHUTDOWN_TIMEOUT=15000
CLUSTERING=false
BACKLOG=511
CSRF_PROTECTION=true

# URLs
BASE_URL=http://localhost:5000/api/v2
FRONTEND_URL=http://localhost:8080

# Monitoring
PROMETHEUS_ENABLED=false
PROMETHEUS_PORT=9090

# =================================================
# DATABASE CONFIGURATION
# =================================================
MONGODB_URI=mongodb://localhost:27017/endlesschat
# For MongoDB Atlas: mongodb+srv://username:password@cluster.mongodb.net/dbname
MONGODB_DB_NAME=endlesschat
MONGODB_MIN_POOL_SIZE=2
MONGODB_MAX_POOL_SIZE=10
MONGODB_MAX_IDLE_MS=30000
MONGODB_SERVER_SELECTION_TIMEOUT_MS=15000
MONGODB_SOCKET_TIMEOUT_MS=45000
MONGODB_CONNECT_TIMEOUT_MS=15000
MONGODB_HEARTBEAT_MS=10000
MONGODB_APP_NAME=endlesschatt

# =================================================
# JWT CONFIGURATION
# =================================================
# IMPORTANT: Use strong, random secrets (64+ characters)
# Generate with: node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
JWT_SECRET=your-super-secret-jwt-key-min-64-chars
ACCESS_TOKEN_SECRET=your-access-token-secret-min-64-chars
REFRESH_TOKEN_SECRET=your-refresh-token-secret-min-64-chars
RESET_TOKEN_SECRET=your-reset-token-secret-min-64-chars

# Token Expiry
JWT_EXPIRES_IN=7d
ACCESS_TOKEN_EXPIRY=1d
JWT_REFRESH_EXPIRES_IN=30d
REFRESH_TOKEN_EXPIRY=10d

# JWT Metadata
JWT_ISSUER=endlessChatt
JWT_AUDIENCE=endlessChatt-users

# Password Reset
PASSWORD_RESET_TOKEN_EXPIRY=15m

# Encryption
# Generate with: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
ENCRYPTION_KEY=your-encryption-key-min-32-chars

# =================================================
# SECURITY CONFIGURATION
# =================================================
# Rate Limiting
RATE_LIMIT_MAX=1000
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MESSAGE=Too many requests from this IP, please try again later.

# Password Policy
PASSWORD_MIN_LENGTH=8
PASSWORD_REQUIRE_UPPERCASE=true
PASSWORD_REQUIRE_LOWERCASE=true
PASSWORD_REQUIRE_NUMBERS=true
PASSWORD_REQUIRE_SPECIAL=false

# =================================================
# EMAIL CONFIGURATION
# =================================================
EMAIL_SERVICE=gmail
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_SECURE=false

# Email Credentials
EMAIL_USERNAME=your-email@gmail.com
EMAIL_PASSWORD=your-app-specific-password
# For Gmail: Generate app password at https://myaccount.google.com/apppasswords

# Email Sender Info
EMAIL_FROM=noreply@yourdomain.com
EMAIL_FROM_NAME=YourAppName

# Email Settings
RESET_TOKEN_TTL_MIN=15

# Support Email (optional)
SUPPORT_EMAIL=support@yourdomain.com

# =================================================
# REDIS CONFIGURATION
# =================================================
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=your-redis-password
REDIS_DB=0
REDIS_KEY_PREFIX=endlesschat:dev:
REDIS_MAX_RETRIES=3
REDIS_CONNECT_TIMEOUT=10000
REDIS_COMMAND_TIMEOUT=5000

# Redis Advanced (optional)
REDIS_TLS=false
REDIS_TLS_REJECT_UNAUTHORIZED=false
REDIS_CLUSTER=false

# =================================================
# FILE UPLOAD CONFIGURATION
# =================================================
UPLOAD_DIR=uploads
UPLOAD_PATH=./uploads
MAX_FILE_SIZE=5242880
# 5MB = 5242880 bytes
ALLOWED_FILE_TYPES=image/jpeg,image/png,image/gif,image/webp

# =================================================
# CLOUDINARY CONFIGURATION
# =================================================
CLOUDINARY_CLOUD_NAME=your-cloud-name
CLOUDINARY_API_KEY=your-api-key
CLOUDINARY_API_SECRET=your-api-secret
CLOUDINARY_FOLDER=your-folder-name
CLOUDINARY_KEY_NAME=your-key-name

# Cloudinary URL (alternative)
CLOUDINARY_URL=cloudinary://api_key:api_secret@cloud_name

# Cloudinary Settings
CLOUDINARY_SECURE=true
CLOUDINARY_QUALITY=auto
CLOUDINARY_USE_CDN=true

# =================================================
# LOGGING CONFIGURATION
# =================================================
LOG_LEVEL=info
# Options: error, warn, info, http, verbose, debug, silly
LOG_TO_FILE=true
LOG_FILE_PATH=./logs
LOG_FILE=app.log
LOG_MAX_SIZE=10m
LOG_MAX_FILES=5d
LOG_TO_CONSOLE=true
LOG_ROTATE_DAYS=30
LOG_COMPRESS=true

# =================================================
# MONITORING CONFIGURATION (Optional)
# =================================================
SENTRY_DSN=your-sentry-dsn
SENTRY_TRACES_SAMPLE_RATE=0.1
GA_TRACKING_ID=GA-XXXXX-X

# =================================================
# VALIDATION CONFIGURATION
# =================================================
EMAIL_MAX_LENGTH=254
USERNAME_MIN_LENGTH=3
USERNAME_MAX_LENGTH=30
USERNAME_PATTERN=^[a-zA-Z0-9_]+$

# =================================================
# NOTES
# =================================================
# 1. Never commit this file with real values to version control
# 2. Use strong, unique secrets for production
# 3. Rotate secrets regularly (every 90 days minimum)
# 4. Use different secrets for dev/staging/production
# 5. Consider using a secret management service (AWS Secrets Manager, HashiCorp Vault)
# 6. Keep this file secure with proper file permissions (chmod 600 .env)
